components <- str_split(file, "_", simplify = TRUE)
case <- components[1,2]
ctrl <- components[1,3]
dataset <- read_csv(path) |>
mutate(case = case,
control = ctrl) |>
arrange(totalMeanLFC) |>
select(Peptide, totalMeanLFC, LFC_SD, case, control) |>
rename_with(str_to_lower) |>
distinct()
}
file_data <- list.files("results", "STK.csv") |>
map_dfr(process_data) |>
write_csv("results/dpp_all.csv")
library(tidyverse)
library(enrichR)
library(writexl)
stk_id <- readRDS("reference_data/stk_id_map.Rds")
stk_hgnc <- readRDS("reference_data/stk_hgnc_map.Rds")
stk_map <- stk_id |>
inner_join(stk_hgnc)
sh_comparison <- read_csv("results/dpp_CTL_HPC_Exer_HPC_STK.csv") |>
group_by(Peptide) |>
filter(abs(LFC) == max(abs(LFC))) |>
ungroup() |>
select(Peptide, LFC) |>
inner_join(stk_map) |>
write_csv("results/annotated_dpp_CTL_HPC_Exer_HPC_STK.csv")
sh_genes <- sh_comparison |>
select(Gene, LFC) |>
filter(LFC >= quantile(sh_comparison$LFC, 0.90) |
LFC <= quantile(sh_comparison$LFC, 0.10)) |>
pull(Gene)
dbs <- c("GO_Molecular_Function_2021", "GO_Cellular_Component_2021",
"GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022")
sh_enriched <- enrichr(sh_genes, dbs) |>
imap(~ write_csv(.x, str_glue("results/CTL_HPC_Exer_HPC_STK-{.y}-Pathways.csv")))
write_xlsx(sh_enriched, "results/CTL_HPC_Exer_HPC_STK-Pathways.xlsx")
library(tidyverse)
library(enrichR)
library(writexl)
stk_id <- readRDS("reference_data/stk_id_map.Rds")
stk_hgnc <- readRDS("reference_data/stk_hgnc_map.Rds")
stk_map <- stk_id |>
inner_join(stk_hgnc)
sh_comparison <- read_csv("results/dpp_CTL_HPC_Exer_STR_STK.csv") |>
group_by(Peptide) |>
filter(abs(LFC) == max(abs(LFC))) |>
ungroup() |>
select(Peptide, LFC) |>
inner_join(stk_map) |>
write_csv("results/annotated_dpp_CTL_HPC_Exer_STR_STK.csv")
sh_genes <- sh_comparison |>
select(Gene, LFC) |>
filter(LFC >= quantile(sh_comparison$LFC, 0.90) |
LFC <= quantile(sh_comparison$LFC, 0.10)) |>
pull(Gene)
dbs <- c("GO_Molecular_Function_2021", "GO_Cellular_Component_2021",
"GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022")
sh_enriched <- enrichr(sh_genes, dbs) |>
imap(~ write_csv(.x, str_glue("results/CTL_HPC_Exer_STR_STK-{.y}-Pathways.csv")))
library(tidyverse)
library(enrichR)
library(writexl)
stk_id <- readRDS("reference_data/stk_id_map.Rds")
stk_hgnc <- readRDS("reference_data/stk_hgnc_map.Rds")
stk_map <- stk_id |>
inner_join(stk_hgnc)
sh_comparison <- read_csv("results/dpp_CTL_STR_CTL_HPC_STK.csv") |>
group_by(Peptide) |>
filter(abs(LFC) == max(abs(LFC))) |>
ungroup() |>
select(Peptide, LFC) |>
inner_join(stk_map) |>
write_csv("results/annotated_dpp_CTL_STR_CTL_HPC_STK.csv")
sh_genes <- sh_comparison |>
select(Gene, LFC) |>
filter(LFC >= quantile(sh_comparison$LFC, 0.90) |
LFC <= quantile(sh_comparison$LFC, 0.10)) |>
pull(Gene)
dbs <- c("GO_Molecular_Function_2021", "GO_Cellular_Component_2021",
"GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022")
sh_enriched <- enrichr(sh_genes, dbs) |>
imap(~ write_csv(.x, str_glue("results/CTL_STR_CTL_HPC_STK-{.y}-Pathways.csv")))
write_xlsx(sh_enriched, "results/CTL_STR_CTL_HPC_STK-Pathways.xlsx")
library(tidyverse)
library(enrichR)
library(writexl)
stk_id <- readRDS("reference_data/stk_id_map.Rds")
stk_hgnc <- readRDS("reference_data/stk_hgnc_map.Rds")
stk_map <- stk_id |>
inner_join(stk_hgnc)
sh_comparison <- read_csv("results/dpp_CTL_STR_Exer_HPC_STK.csv") |>
group_by(Peptide) |>
filter(abs(LFC) == max(abs(LFC))) |>
ungroup() |>
select(Peptide, LFC) |>
inner_join(stk_map) |>
write_csv("results/annotated_dpp_CTL_STR_Exer_HPC_STK.csv")
sh_genes <- sh_comparison |>
select(Gene, LFC) |>
filter(LFC >= quantile(sh_comparison$LFC, 0.90) |
LFC <= quantile(sh_comparison$LFC, 0.10)) |>
pull(Gene)
dbs <- c("GO_Molecular_Function_2021", "GO_Cellular_Component_2021",
"GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022")
sh_enriched <- enrichr(sh_genes, dbs) |>
imap(~ write_csv(.x, str_glue("results/CTL_STR_Exer_HPC_STK-{.y}-Pathways.csv")))
write_xlsx(sh_enriched, "results/CTL_STR_Exer_HPC_STK-Pathways.xlsx")
library(tidyverse)
library(enrichR)
library(writexl)
stk_id <- readRDS("reference_data/stk_id_map.Rds")
stk_hgnc <- readRDS("reference_data/stk_hgnc_map.Rds")
stk_map <- stk_id |>
inner_join(stk_hgnc)
sh_comparison <- read_csv("results/dpp_CTL_STR_Exer_STR_STK.csv") |>
group_by(Peptide) |>
filter(abs(LFC) == max(abs(LFC))) |>
ungroup() |>
select(Peptide, LFC) |>
inner_join(stk_map) |>
write_csv("results/annotated_dpp_CTL_STR_Exer_STR_STK.csv")
sh_genes <- sh_comparison |>
select(Gene, LFC) |>
filter(LFC >= quantile(sh_comparison$LFC, 0.90) |
LFC <= quantile(sh_comparison$LFC, 0.10)) |>
pull(Gene)
dbs <- c("GO_Molecular_Function_2021", "GO_Cellular_Component_2021",
"GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022")
sh_enriched <- enrichr(sh_genes, dbs) |>
imap(~ write_csv(.x, str_glue("results/CTL_STR_Exer_STR_STK-{.y}-Pathways.csv")))
write_xlsx(sh_enriched, "results/CTL_STR_Exer_STR_STK-Pathways.xlsx")
library(tidyverse)
library(enrichR)
library(writexl)
stk_id <- readRDS("reference_data/stk_id_map.Rds")
stk_hgnc <- readRDS("reference_data/stk_hgnc_map.Rds")
stk_map <- stk_id |>
inner_join(stk_hgnc)
sh_comparison <- read_csv("results/dpp_Exer_STR_Exer_HPC_STK.csv") |>
group_by(Peptide) |>
filter(abs(LFC) == max(abs(LFC))) |>
ungroup() |>
select(Peptide, LFC) |>
inner_join(stk_map) |>
write_csv("results/annotated_dpp_Exer_STR_Exer_HPC_STK.csv")
sh_genes <- sh_comparison |>
select(Gene, LFC) |>
filter(LFC >= quantile(sh_comparison$LFC, 0.90) |
LFC <= quantile(sh_comparison$LFC, 0.10)) |>
pull(Gene)
dbs <- c("GO_Molecular_Function_2021", "GO_Cellular_Component_2021",
"GO_Biological_Process_2021", "KEGG_2021_Human", "Reactome_2022")
sh_enriched <- enrichr(sh_genes, dbs) |>
imap(~ write_csv(.x, str_glue("results/Exer_STR_Exer_HPC_STK-{.y}-Pathways.csv")))
write_xlsx(sh_enriched, "results/Exer_STR_Exer_HPC_STK-Pathways.xlsx")
View(stk_map)
View(stk_id)
View(stk_hgnc)
View(sh_comparison)
View(sh_comparison)
View(sh_enriched)
View(stk_map)
#| label: "setup"
#| include: FALSE
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(KRSA)
library(knitr)
library(tidyverse)
library(gt)
library(furrr)
#| label: "design"
#| fig-width: 4
#| fig-height: 4
tt <- tibble(
num = rep(c(3.5,2.5,1.5,0.5),3),
chips = rep(c(2,5,8),each=4),
colr = c(rep(1,12)),
nms = rep(LETTERS[1:4], 3)
)
rundes <- ggplot() +
geom_rect(aes(xmin=1, xmax=3, ymin=0,ymax=4), fill="gray30") +
geom_rect(aes(xmin=4, xmax=6, ymin=0,ymax=4), fill="gray30") +
geom_rect(aes(xmin=7, xmax=9, ymin=0,ymax=4), fill="gray30") +
xlim(0,10) +
theme_void()
rundes + geom_point(data = tt, aes(chips, num,color=factor(colr)), size = 13, show.legend = F) +
geom_text(data = tt, aes(chips,num,label = nms), size = 1.6) +
scale_color_manual(values=c("green3", "red3"))
#| label: "read-data"
chipType <- params$chip_type
# Read crosstab view bionavigator files and tidy data
raw_data <- krsa_read(
signal_file = params$signal_file,
signal_saturation = params$saturation_file
)
#| label: "quality-control"
# qc processing
qc_data <- krsa_qc_steps(raw_data) %>%
mutate(
Group = case_when(
SampleName == "1" ~ "Male_Veh",
SampleName == "2" ~ "Male_Ins",
SampleName == "3" ~ "Female_Veh",
SampleName == "4" ~ "Female_Ins",
TRUE ~ SampleName
),
SampleName = paste0(Group, "_" , Barcode)
)
groups <- unique(qc_data$Group)
# extract end level signal values @ all max exposure time (100ms)
krsa_extractEndPointMaxExp(qc_data, chipType) -> data_pw_max
# extract end level signal values end level @ all exposure times
krsa_extractEndPoint(qc_data, chipType) -> data_pw
#| label: "model"
# Filter out peptides with low signals
high_peptides <- krsa_filter_lowPeps(data_pw_max, 5)
# Fit the linear model
# This will produce a list of data frames:
# scaled: the Slope_Transformed values (see above for more info on Slope_Transformed)
# normalized: the Slope_Transformed values but normalized by Chip/Barcode
# Grouped: The mean of Slope_Transformed values for all samples within a group
data_modeled <- krsa_scaleModel(data_pw, high_peptides)
# Filter out peptides weak linear fit
linear_peptides <- krsa_filter_nonLinear(data_modeled$scaled, 0.8)
# Filter out reference peptides
clean_peptides <- krsa_filter_ref_pep(linear_peptides)
#| label: "global-cv-plot"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Coefficient of Variation plotted for each peptide across all 4 groups"
# Plot a CV figure using the modeled normalized data
krsa_cv_plot(data_modeled$normalized, clean_peptides)
#| label: "global-violin-plot-by-group"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Violin Plots for signal intensity Distribution Across Groups for all replicates"
# Plot a violin figure and facet by the (Group) variable
krsa_violin_plot(data_modeled$scaled, clean_peptides, "Group")
#| label: "global-violin-plot-by-chip"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Violin Plots for signal intensity Distribution Across Chips for all replicates"
# Plot a violin figure and facet by the (Barcode) variable
krsa_violin_plot(data_modeled$scaled, clean_peptides, "Barcode")
#| label: "global-signal-heatmap-individual"
#| fig-cap: "Row and chip normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled normalized data
krsa_heatmap(data_modeled$normalized, clean_peptides, scale = "row")
#| label: "global-signal-heatmap-grouped"
#| fig-cap: "Row and group normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled grouped data
krsa_heatmap_grouped(data_modeled$grouped, clean_peptides, scale = "row")
#| label: "group-comp-list"
# You can define the comparison groups here.
# The group names are in the `groups` variable and you can use subscripting to select the groups
# For example, to compare the first and fourth groups, you can use `groups[1]` and `groups[4]`
# Then copy the next block as many times as there are comparisons and change the `COMP1` to `COMP2`, `COMP3`, etc.
# Also make sure that the label is unique for each block
# Define Groups to be compared
comparisons <- list (COMP1 = c(groups[2], groups[1]),
COMP2 = c(groups[1], groups[3]),
COMP3 = c(groups[1], groups[4]),
COMP4 = c(groups[2], groups[3]),
COMP5 = c(groups[2], groups[4]),
COMP6 = c(groups[4], groups[3]))
#| results: "asis"
#| echo: FALSE
#| include: TRUE
#| label: "childA"
case <- comparisons$COMP1[1]
ctrl <- comparisons$COMP1[2]
random <- "A"
threshold <- params$threshold
src <- knitr::knit_expand(file = "_comparison.Rmd", case = case, ctrl = ctrl, threshold = threshold, chip = params$chip_type)
res <- knitr::knit_child(text = src, quiet = TRUE)
#| results: "asis"
#| echo: FALSE
#| include: TRUE
#| label: "childB"
case <- comparisons$COMP2[1]
ctrl <- comparisons$COMP2[2]
random <- "B"
threshold <- params$threshold
src <- knitr::knit_expand(file = "_comparison.Rmd", case = case, ctrl = ctrl, threshold = threshold, chip = params$chip_type)
res <- knitr::knit_child(text = src, quiet = TRUE)
#| label: "setup"
#| include: FALSE
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(KRSA)
library(knitr)
library(tidyverse)
library(gt)
library(furrr)
#| label: "design"
#| fig-width: 4
#| fig-height: 4
tt <- tibble(
num = rep(c(3.5,2.5,1.5,0.5),3),
chips = rep(c(2,5,8),each=4),
colr = c(rep(1,12)),
nms = rep(LETTERS[1:4], 3)
)
rundes <- ggplot() +
geom_rect(aes(xmin=1, xmax=3, ymin=0,ymax=4), fill="gray30") +
geom_rect(aes(xmin=4, xmax=6, ymin=0,ymax=4), fill="gray30") +
geom_rect(aes(xmin=7, xmax=9, ymin=0,ymax=4), fill="gray30") +
xlim(0,10) +
theme_void()
rundes + geom_point(data = tt, aes(chips, num,color=factor(colr)), size = 13, show.legend = F) +
geom_text(data = tt, aes(chips,num,label = nms), size = 1.6) +
scale_color_manual(values=c("green3", "red3"))
#| label: "read-data"
chipType <- params$chip_type
# Read crosstab view bionavigator files and tidy data
raw_data <- krsa_read(
signal_file = params$signal_file,
signal_saturation = params$saturation_file
)
#| label: "quality-control"
# qc processing
qc_data <- krsa_qc_steps(raw_data) %>%
mutate(
Group = case_when(
SampleName == "1" ~ "Male_Veh",
SampleName == "2" ~ "Male_Ins",
SampleName == "3" ~ "Female_Veh",
SampleName == "4" ~ "Female_Ins",
TRUE ~ SampleName
),
SampleName = paste0(Group, "_" , Barcode)
)
groups <- unique(qc_data$Group)
# extract end level signal values @ all max exposure time (100ms)
krsa_extractEndPointMaxExp(qc_data, chipType) -> data_pw_max
# extract end level signal values end level @ all exposure times
krsa_extractEndPoint(qc_data, chipType) -> data_pw
#| label: "model"
# Filter out peptides with low signals
high_peptides <- krsa_filter_lowPeps(data_pw_max, 5)
# Fit the linear model
# This will produce a list of data frames:
# scaled: the Slope_Transformed values (see above for more info on Slope_Transformed)
# normalized: the Slope_Transformed values but normalized by Chip/Barcode
# Grouped: The mean of Slope_Transformed values for all samples within a group
data_modeled <- krsa_scaleModel(data_pw, high_peptides)
# Filter out peptides weak linear fit
linear_peptides <- krsa_filter_nonLinear(data_modeled$scaled, 0.8)
# Filter out reference peptides
clean_peptides <- krsa_filter_ref_pep(linear_peptides)
#| label: "global-cv-plot"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Coefficient of Variation plotted for each peptide across all 4 groups"
# Plot a CV figure using the modeled normalized data
krsa_cv_plot(data_modeled$normalized, clean_peptides)
#| label: "global-violin-plot-by-group"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Violin Plots for signal intensity Distribution Across Groups for all replicates"
# Plot a violin figure and facet by the (Group) variable
krsa_violin_plot(data_modeled$scaled, clean_peptides, "Group")
#| label: "global-violin-plot-by-chip"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Violin Plots for signal intensity Distribution Across Chips for all replicates"
# Plot a violin figure and facet by the (Barcode) variable
krsa_violin_plot(data_modeled$scaled, clean_peptides, "Barcode")
#| label: "global-signal-heatmap-individual"
#| fig-cap: "Row and chip normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled normalized data
krsa_heatmap(data_modeled$normalized, clean_peptides, scale = "row")
#| label: "global-signal-heatmap-grouped"
#| fig-cap: "Row and group normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled grouped data
krsa_heatmap_grouped(data_modeled$grouped, clean_peptides, scale = "row")
#| label: "global-signal-heatmap-individual"
#| fig-cap: "Row and chip normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled normalized data
krsa_heatmap(data_modeled$normalized, clean_peptides, scale = "row", borders = FALSE)
#| label: "setup"
#| include: FALSE
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(KRSA)
library(knitr)
library(tidyverse)
library(gt)
library(furrr)
#| label: "design"
#| fig-width: 4
#| fig-height: 4
tt <- tibble(
num = rep(c(3.5,2.5,1.5,0.5),3),
chips = rep(c(2,5,8),each=4),
colr = c(rep(1,12)),
nms = rep(LETTERS[1:4], 3)
)
rundes <- ggplot() +
geom_rect(aes(xmin=1, xmax=3, ymin=0,ymax=4), fill="gray30") +
geom_rect(aes(xmin=4, xmax=6, ymin=0,ymax=4), fill="gray30") +
geom_rect(aes(xmin=7, xmax=9, ymin=0,ymax=4), fill="gray30") +
xlim(0,10) +
theme_void()
rundes + geom_point(data = tt, aes(chips, num,color=factor(colr)), size = 13, show.legend = F) +
geom_text(data = tt, aes(chips,num,label = nms), size = 1.6) +
scale_color_manual(values=c("green3", "red3"))
#| label: "read-data"
chipType <- params$chip_type
# Read crosstab view bionavigator files and tidy data
raw_data <- krsa_read(
signal_file = params$signal_file,
signal_saturation = params$saturation_file
)
#| label: "quality-control"
# qc processing
qc_data <- krsa_qc_steps(raw_data) %>%
mutate(
Group = case_when(
SampleName == "1" ~ "Male_Veh",
SampleName == "2" ~ "Male_Ins",
SampleName == "3" ~ "Female_Veh",
SampleName == "4" ~ "Female_Ins",
TRUE ~ SampleName
),
SampleName = paste0(Group, "_" , Barcode)
)
groups <- unique(qc_data$Group)
# extract end level signal values @ all max exposure time (100ms)
krsa_extractEndPointMaxExp(qc_data, chipType) -> data_pw_max
# extract end level signal values end level @ all exposure times
krsa_extractEndPoint(qc_data, chipType) -> data_pw
#| label: "model"
# Filter out peptides with low signals
high_peptides <- krsa_filter_lowPeps(data_pw_max, 5)
# Fit the linear model
# This will produce a list of data frames:
# scaled: the Slope_Transformed values (see above for more info on Slope_Transformed)
# normalized: the Slope_Transformed values but normalized by Chip/Barcode
# Grouped: The mean of Slope_Transformed values for all samples within a group
data_modeled <- krsa_scaleModel(data_pw, high_peptides)
# Filter out peptides weak linear fit
linear_peptides <- krsa_filter_nonLinear(data_modeled$scaled, 0.8)
# Filter out reference peptides
clean_peptides <- krsa_filter_ref_pep(linear_peptides)
#| label: "global-cv-plot"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Coefficient of Variation plotted for each peptide across all 4 groups"
# Plot a CV figure using the modeled normalized data
krsa_cv_plot(data_modeled$normalized, clean_peptides)
#| label: "global-violin-plot-by-group"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Violin Plots for signal intensity Distribution Across Groups for all replicates"
# Plot a violin figure and facet by the (Group) variable
krsa_violin_plot(data_modeled$scaled, clean_peptides, "Group")
#| label: "global-violin-plot-by-chip"
#| fig-width: 6
#| fig-height: 6
#| fig-cap: "Violin Plots for signal intensity Distribution Across Chips for all replicates"
# Plot a violin figure and facet by the (Barcode) variable
krsa_violin_plot(data_modeled$scaled, clean_peptides, "Barcode")
#| label: "global-signal-heatmap-individual"
#| fig-cap: "Row and chip normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled normalized data
krsa_heatmap(data_modeled$normalized, clean_peptides, scale = "row", borders = FALSE)
#| label: "global-signal-heatmap-individual"
#| fig-cap: "Row and chip normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled normalized data
krsa_heatmap(data_modeled$normalized, clean_peptides, scale = "row", border = FALSE)
#| label: "global-signal-heatmap-grouped"
#| fig-cap: "Row and group normalized intensity values for the selected peptides"
#| fig-height: 6
#| fig-width: 6
# Generates a heatmap using the modeled grouped data
krsa_heatmap_grouped(data_modeled$grouped, clean_peptides, scale = "row", border = FALSE)
